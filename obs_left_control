#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float32, Bool
import math

class OBS_Control:
    def __init__(self):
        # ROS 노드 초기화
        rospy.init_node("control_node")
        
        # 센서 데이터 구독자 설정
        rospy.Subscriber("/dist90R", Float32, self.dist90R_CB)
        rospy.Subscriber("/dist75R", Float32, self.dist75R_CB)
        rospy.Subscriber("/dist90L", Float32, self.dist90L_CB)
        rospy.Subscriber("/dist75L", Float32, self.dist75L_CB)
        rospy.Subscriber("/obsR", Bool, self.obsR_CB)
        rospy.Subscriber("/obsL", Bool, self.obsL_CB)
        rospy.Subscriber("/obsC", Bool, self.obsC_CB)
        
        # 속도 명령 발행자 설정
        self.pub = rospy.Publisher("/cmd_vel", Twist, queue_size=1)
        
        # 초기 값 설정
        self.cmd_msg = Twist()
        self.obsC = False
        self.obsR = False
        self.obsL = False
        self.dist90R = 0.5
        self.dist90L = 0.5
        self.dist75R = 0.5
        self.dist75L = 0.5
        self.wall_dist = 0.3
        self.kp = 0.01
        self.pre_steer = 0
        
        self.rate = rospy.Rate(2)  # 루프 주기를 2Hz로 설정

    # 센서 데이터 콜백 함수
    def dist90R_CB(self, data):
        self.dist90R = data.data

    def dist75R_CB(self, data):
        self.dist75R = data.data

    def dist90L_CB(self, data):
        self.dist90L = data.data

    def dist75L_CB(self, data):
        self.dist75L = data.data

    def obsR_CB(self, data):
        self.obsR = data.data

    def obsL_CB(self, data):
        self.obsL = data.data

    def obsC_CB(self, data):
        self.obsC = data.data

    def control(self):
        speed = 0.0
        steer = 0.0

        if not self.obsC and self.obsL and self.obsR:  # 좌우 벽을 따라 직진
            speed = 0.4
            steer = 0.0
            rospy.loginfo('Driving forward between walls')
        elif self.obsR and not self.obsL:  # 왼쪽으로 회전
            speed = 0.4
            steer = 1.5
            rospy.loginfo('turn left')
        elif self.obsL and not self.obsR:  # 오른쪽으로 회전
            speed = 0.4
            steer = -1.5
            rospy.loginfo('turn right')
        elif self.obsC and self.obsR and self.obsL:  # 정지
            speed = 0
            steer = 0
            rospy.loginfo('stop')
        else:
            if self.obsC:  # 전방 장애물이 있는 경우
                speed = 0.1  # 속도를 줄입니다.
                if self.obsL and not self.obsR:
                    steer = -1.5  # 오른쪽으로 회전
                    rospy.loginfo('turn right slowly')
                elif self.obsR and not self.obsL:
                    steer = 1.5  # 왼쪽으로 회전
                    rospy.loginfo('turn left slowly')
                else:
                    steer = 0.0  # 직진 유지
                    rospy.loginfo('slow down and drive straight')
            else:
                speed = 0.4  # 장애물이 없는 경우 기본 속도
                steer = 0.0
                rospy.loginfo('drive straight')

        self.cmd_msg.linear.x = speed
        self.cmd_msg.angular.z = steer
        self.pub.publish(self.cmd_msg)
        self.pre_steer = steer

def main():
    OBS_driving = OBS_Control()
    while not rospy.is_shutdown():
        OBS_driving.control()
        OBS_driving.rate.sleep()

if __name__ == "__main__":
    main()
